security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api/(?!.*doc|users).*?
            stateless: true
            #anonymous: true # TODO: Allow /api/users POST
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: lazy
            logout: ~
            form_login:
                username_parameter: email
                password_parameter: password
                login_path: /admin/login
                check_path: /admin/login
                default_target_path: /admin/dashbaord
                failure_path: /admin/login
                always_use_default_target_path: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/api$,       roles: [ROLE_ADMIN] }
        - { path: ^/api/doc,    roles: [IS_AUTHENTICATED_ANONYMOUSLY] }
        - { path: ^/api/tokens, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: ['OPTIONS', 'POST'] }
        - { path: ^/api/users,  roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: ['POST']            }
